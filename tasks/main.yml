---
- name: create system group
  group:
    name: "{{ traefik_system_group }}"
    system: true
    state: present
  when: traefik_system_group != "root"
  become: true
  tags: traefik

- name: create system user
  user:
    name: "{{ traefik_system_user }}"
    system: true
    shell: "/sbin/nologin"
    group: "{{ traefik_system_group }}"
    createhome: false
  when: traefik_system_user != "root"
  become: true
  tags: traefik

- name: create configuration and data directories
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ traefik_system_user }}"
    group: "{{ traefik_system_group }}"
    mode: 0755
  with_items:
    - "{{ traefik_config_dir }}"
    - "{{ traefik_config_dir }}/rules"
    - "/var/log/traefik"
  become: true
  tags: traefik

- name: create acme directorie
  file:
    path: "{{ traefik_config_dir }}/acme"
    state: directory
    owner: "{{ traefik_system_user }}"
    group: "{{ traefik_system_group }}"
    mode: 0700
  become: true
  tags: traefik

- name: copy logrotate rule
  template:
    src: "traefik.logrotate.j2"
    dest: "/etc/logrotate.d/traefik"
    owner: "root"
    group: "root"
    mode: 0644
  tags:
    - traefik
    - alertrules

- name: check if traefik is installed
  stat:
    path: "{{ traefik_binary_install_dir }}/traefik"
  register: __traefik_is_installed
  become: true
  tags: traefik

- name: gather currently installed traefik version (if any)
  command: "{{ traefik_binary_install_dir }}/traefik version"
  args:
    warn: false
  changed_when: false
  register: __traefik_current_version_output
  when: __traefik_is_installed.stat.exists
  become: true
  tags: traefik

- name: download binary to local folder
  get_url:
    url: "https://github.com/traefik/traefik/releases/download/v{{ traefik_version }}/traefik_v{{ traefik_version }}_linux_{{ go_arch }}.tar.gz"
    dest: "/tmp/traefik-{{ traefik_version }}.linux-{{ go_arch }}.tar.gz"
  environment: "{{ proxy_env }}"
  register: _download_archive
  until: _download_archive is succeeded
  retries: 5
  delay: 2
  # run_once: true # <-- this cannot be set due to multi-arch support
  delegate_to: localhost
  check_mode: false
  become: true
  tags: traefik
  when: (not __traefik_is_installed.stat.exists) or (__traefik_current_version_output.stdout_lines[0].split(" ")[1] != traefik_version)

- name: unpack binaries
  unarchive:
    src: "/tmp/traefik-{{ traefik_version }}.linux-{{ go_arch }}.tar.gz"
    dest: "/tmp"
  delegate_to: localhost
  check_mode: false
  become: true
  tags: traefik
  when: (not __traefik_is_installed.stat.exists) or (__traefik_current_version_output.stdout_lines[0].split(" ")[1] != traefik_version)
  
- name: propagate binaries
  copy:
    src: "/tmp/traefik"
    dest: "{{ traefik_binary_install_dir }}/traefik"
    mode: 0755
    owner: root
    group: root
  notify: restart traefik
  become: true
  tags: traefik
  when: (not __traefik_is_installed.stat.exists) or (__traefik_current_version_output.stdout_lines[0].split(" ")[1] != traefik_version)

- name: generate config file
  copy:
    content: "{{ traefik_config | to_nice_yaml(indent=2, sort_keys=False) }}\n"
    dest: "{{ traefik_config_dir }}//config.yml"
    owner: "{{ traefik_system_user }}"
    group: "{{ traefik_system_group }}"
    mode: 0644
  notify: reload traefik
  become: true
  tags:
    - traefik
    - traefik_config

- name: generate rules config files
  copy:
    content: "{{ item.content | to_nice_yaml(indent=2, sort_keys=False) }}\n"
    dest: "{{ traefik_config_dir }}//rules/{{ item.name }}.yml"
    owner: "{{ traefik_system_user }}"
    group: "{{ traefik_system_group }}"
    mode: 0644
  with_items: "{{ traefik_rules_config }}"
  become: true
  tags:
    - traefik
    - traefik_config

- name: copy defined custom rules *.rule from files folder
  copy:
    src: "{{ item }}"
    dest: "{{ traefik_config_dir }}/rules/"
    owner: "{{ traefik_system_user }}"
    group: "{{ traefik_system_group }}"
    mode: 0644
  with_fileglob: "*.yml"
  when: traefik_copy_default_rules
  become: true
  tags:
    - traefik
    - traefik_config

- name: check if acme.json exists
  stat:
    path: "{{ traefik_config_dir }}/acme/acme.json"
  register: __acme_json_exists
  become: true
  tags: traefik

- name: touch acme.json if not exists
  file:
    path: "{{ traefik_config_dir }}/acme/acme.json"
    state: touch
    owner: "{{ traefik_system_user }}"
    group: "{{ traefik_system_group }}"
    mode: 0600
  when: (not __acme_json_exists.stat.exists)
  become: true
  tags: traefik

- name: create systemd service unit
  template:
    src: traefik.service.j2
    dest: /etc/systemd/system/traefik.service
    owner: root
    group: root
    mode: 0644
  notify: restart traefik
  become: true
  tags: traefik

- name: ensure service is started and enabled
  systemd:
    name: traefik
    state: reloaded
    enabled: yes
  become: true
  tags: traefik